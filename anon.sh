#!/bin/bash

# dont be a script kiddie.. :)
# This script is used to set up the environment for the anon.sh script.
# It checks for the presence of required packages and sets up the necessary environment variables.
# If you are not sure what this script does, please read the comments below.
# If you are not comfortable with this script, please do not run it.
# This script is provided as is, without any warranty. Use at your own risk.
# If you have any questions, please ask me on email or whatsapp.


# ========= DO NOT EDIT THIS FILE =========
eval "$(base64 -d <<'EOF'


EOF
)"
